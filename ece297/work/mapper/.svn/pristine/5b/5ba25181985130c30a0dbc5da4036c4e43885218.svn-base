/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/* 
 * File:   Information_bar.h
 * Author: qiuchenh
 *
 * Created on February 26, 2018, 5:24 PM
 */

#ifndef INFORMATION_BAR_H
#define INFORMATION_BAR_H

#include "newmap.h"
#include "m1.h"
#include "m2.h"
#include "m3.h"
#include "Helper.h"
#include "interface_icon.h"
#include "StreetsDatabaseAPI.h"
#include "OSMDatabaseAPI.h" 
#include "graphics.h"
#include "Global.h"
#include "graphics_types.h"
#include "X11/keysymdef.h"

// draw a static search at the bottom of screen
bool disappear_text_one = false;
bool disappear_text_two = false;

void drawSearchBar() {

    // search search bars on top
    setcolor(WHITE);
    fillrect(leftsearchBar.left(), leftsearchBar.bottom(), leftsearchBar.right(), leftsearchBar.top()); //left
    fillrect(rightSearchBar.left(), rightSearchBar.bottom(), rightSearchBar.right(), rightSearchBar.top()); //right
    setcolor(t_color(201, 198, 196));
    setfontsize(14);
    if (disappear_text_one == false) drawtext(bottom_l_x_left + bar_length / 2, bar_height_bottom * 0.55, "Street One ");
    if (disappear_text_two == false) drawtext(bottom_l_x_right + bar_length / 2, bar_height_bottom * 0.55, "Street Two ");

    drawrect(searchIcon.left(), searchIcon.bottom(), searchIcon.right(), searchIcon.top()); //???    
    draw_surface(load_png_from_file("search_icon.png"), searchIcon.left(), searchIcon.top());

    //  drawrect(leftArrow.left, leftArrow.bottom, leftArrow.right, leftArrow.top);
    draw_surface(load_png_from_file("arrow_left.png"), leftArrow.left(), leftArrow.top());

    //   drawrect(rightArrow.left, rightArrow.bottom, rightArrow.right, rightArrow.top);
    draw_surface(load_png_from_file("arrow_right.png"), rightArrow.left(), rightArrow.top());
    // middle
    //  drawrect(listInter.left, listInter.bottom, listInter.right, listInter.top);
    draw_surface(load_png_from_file("findpath.png"), findPath.left(), findPath.top());
    
    draw_surface(load_png_from_file("list_icon.png"), listInter.left(), listInter.top());
    //right side    
    drawrect(zoomInButton.left(), zoomInButton.bottom(), zoomInButton.right(), zoomInButton.top());
    draw_surface(load_png_from_file("zoom_in.png"), zoomInButton.left(), zoomInButton.top());

    drawrect(zoomOutButton.left(), zoomOutButton.bottom(), zoomOutButton.right(), zoomOutButton.top());
    draw_surface(load_png_from_file("zoom_out.png"), zoomOutButton.left(), zoomOutButton.top());

    //   drawrect(questionMark.left, questionMark.bottom, questionMark.right, questionMark.top);
    draw_surface(load_png_from_file("question_mark.png"), questionMark.left(), questionMark.bottom());

    setcolor(BLACK);
   // drawrect(POIselect.left(), POIselect.bottom(), POIselect.right(), POIselect.top());
    draw_surface(load_png_from_file("layers.png"), POIselect.left(), POIselect.top());

    // drawrect(changeMapButton.left(), changeMapButton.bottom(), changeMapButton.right(), changeMapButton.top());
     draw_surface(load_png_from_file("change-map.png"), changeMapButton.left(), changeMapButton.top()+png_size);
   
    // drawrect(Details.left(), Details.bottom(), Details.right(), Details.top());
     draw_surface(load_png_from_file("details-tab.png"), Details.left(), Details.top()+png_size*2);
      
    
}


void draw_string() {
    setcolor(BLACK);
    setfontsize(14);
    if (!outputString_s1.empty()) {
        drawtext(bottom_l_x_left + bar_length / 2, bar_height_bottom * 0.55, outputString_s1);
    }
    if (!outputString_s2.empty()) {
        drawtext(bottom_l_x_right + bar_length / 2, bar_height_bottom * 0.55, outputString_s2);
    }
    /*if (!outputString_map.empty()) {
          drawtext(length_of_bar * 0.2, map_t_y + (map_b_y - map_t_y) / 2, outputString_map);
      }    */

}

//This function will be called when user press any botton at mouse

void act_on_mouse_click(float x, float y, t_event_buttonPressed event) {
    if (event.button == 3) {
        set_visible_world(initial_coords);
    } else if (event.button == 1) {
        user_clicked_world.x = x;
        user_clicked_world.y = y;
        user_clicked_screen = world_to_scrn(user_clicked_world);
        std::cout <<"user_clicked_screen = "<<user_clicked_screen.x << std::endl;
            //click on info area  
        set_keypress_input(true);
        if ( (leftsearchBar.intersects(user_clicked_screen)) == true) {
            // user clicked on Street One search box
            //std::cout << "1" << std::endl;
            inS1 = true;
            inS2 = false;
            //inMapChange = false;
            //set_keypress_input(true);
           // draw_enable = false;
           // user_click_map = false;
            disappear_text_one = true;
            searIconClick = false;
        }//user clicked on street2 search bar
        else if (rightSearchBar.intersects(user_clicked_screen.x, user_clicked_screen.y) == true) {
            // user clicked on Street Two search box
            std::cout << "2" << std::endl;
            inS1 = false;
            inS2 = true;
            //inMapChange = false;
          //  set_keypress_input(true);
           // draw_enable = false;
           // user_click_map = false;

            disappear_text_two = true;
            searIconClick = false;
        }
        else if (searchIcon.intersects(user_clicked_screen.x, user_clicked_screen.y) == true) {
            searIconClick = true;
            interIconClick = false;
           // user_click_map = false;
           // draw_enable = true;
            disappear_text_one = true;
            disappear_text_two = true;
        } 
        else if ( findPath.intersects(user_clicked_screen.x,user_clicked_screen.y) == true) {
            drawHightlightPath();
            for_highlight_ZOOM();
            std::cout << "interONe = " <<foundInterID.interOne <<std::endl;
             std::cout << "interTwo = " <<foundInterID.interTwo <<std::endl;
        }
        
        else if (zoomInButton.intersects(user_clicked_screen.x, user_clicked_screen.y) == true) {
            if (!inputString_s1.empty()) disappear_text_one = true;
            if (!inputString_s2.empty()) disappear_text_two = true;
            zoom_in(*drawscreen);
        } else if (zoomOutButton.intersects(user_clicked_screen.x, user_clicked_screen.y) == true) {
            if (!inputString_s1.empty()) disappear_text_one = true;
            if (!inputString_s2.empty()) disappear_text_two = true;
            zoom_out(*drawscreen);
        } else if (listInter.intersects(user_clicked_screen.x, user_clicked_screen.y) == true) {
            if (!inputString_s1.empty()) disappear_text_one = true;
            if (!inputString_s2.empty()) disappear_text_two = true;
            interIconClick = true;
        } else {
            // when clicked on map, all texts in information area will be erased
           // set_keypress_input(false);
            draw_inter_streets = false;
           // draw_enable = true;
            user_click_map = true;
            inS1 = false;
            inS2 = false;
            //inMapChange = false;
            disappear_text_one = false;
            disappear_text_two = false;
            searIconClick = false;

            LatLon newpoint(y_to_lat(y), x_to_lon(x));
            inter_id = find_closest_intersection(newpoint);         
            click_screen = coordinate_convert_inter(inter_id);        
            Zoom_in_area();
            //secondly convert the position into screen coordinate
            //highlight clicked point
            click_screen = coordinate_convert_inter(inter_id);

        }
    }
    drawscreen();
}

void drawHightlightPath() {
    //two name->hightlight two end points -> hightlight path;
    foundPath = find_path_between_intersections(foundInterID.interOne, foundInterID.interTwo, 15);
    highlightColor = true;
    for (std::vector<unsigned>::iterator it = foundPath.begin(); it != foundPath.end(); it++) {
        unsigned temp = *it;
        std::cout << "foundPath =" << temp << std::endl;
    }
}


//The function print information of the nearest intersection to where user clicked

void hightlight_intersection(unsigned inter_id_clicked) {
    setcolor(BLACK);
    std::string inter_name = (mymap->intersectionUOM[inter_id_clicked]).intersectionName1;
    /*setfontsize(12);
    drawtext(length_of_bar * 0.45, bar_t_r_y * 1.03, "Intersection Information:");
    drawtext(length_of_bar * 0.455, bar_t_r_y * 1.054, "Clicked Intersection name :");
    drawtext(length_of_bar * 0.65, bar_t_r_y * 1.054, inter_name);
    drawtext(length_of_bar * 0.455, bar_t_r_y * 1.075, "Clicked Intersection Index : ");
    std::string temp_int = std::to_string(inter_id_clicked);
    drawtext(length_of_bar * 0.65, bar_t_r_y * 1.075, temp_int);
    drawtext(length_of_bar * 0.455, bar_t_r_y * 1.096, "Clicked Intersection Position(lon,lat): ");
    std::string temp_pos_1 = std::to_string((mymap->intersectionUOM[inter_id_clicked]).intersectionPosition1.lon());
    std::string temp_pos_2 = std::to_string((mymap->intersectionUOM[inter_id_clicked]).intersectionPosition1.lat());
    std::string result = "( " + temp_pos_1 + "," + temp_pos_2 + " )";
    drawtext(length_of_bar * 0.65, bar_t_r_y * 1.096, result);*/
}



// The function is called when user type any bottom at keyboard

void act_on_keyboard(char c, int keysym) {
    //inS1 == true: The clicked position located in search box for Street One
    //inS2 == true: The clicked position located in search box for Street Two
    //inMapChange == true: The clicked position located in search box for Change Map

#ifdef X11

    switch (keysym) {
        case XK_Return:
            //user finish input
            if (!inputString_s1.empty() && inputString_s2.empty()) {
                //user only enter one street name
                draw_inter_streets = false;
                user_enter_string_twice = false;
            } else if (!inputString_s1.empty() && !inputString_s2.empty()) {
                //user enter two street names
                // begin to print information and highlight intersections
                draw_inter_streets = true;
                user_enter_string_twice = true;
            }
            break;
        case XK_BackSpace:
            //user want to delete the character from input string
            special = true;
            if (inS1) {
                if (inputString_s1.size() > 0) {
                    inputString_s1.pop_back(); //(inputString_s1.begin() + (inputString_s1.size() - 1));
                    std::string temp(inputString_s1.begin(), inputString_s1.end());
                    outputString_s1 = temp;

                }
            } else if (inS2) {
                if (outputString_s2.size() > 0) {
                    inputString_s2.pop_back(); //erase(inputString_s2.begin() + (inputString_s2.size() - 1));
                    std::string temp(inputString_s2.begin(), inputString_s2.end());
                    outputString_s2 = temp;
                }
            }
            break;
        case XK_Tab:
            if (inS1 == true) {
                inS1 = false;
                inS2 = true;
                if (!inputString_s1.empty()) disappear_text_one = true;
                else disappear_text_one = false;
                disappear_text_two = true;
            }
            break;
        default: special = false;
    }

#endif

    only_draw_string = true;
    if (c != NULL && !special) {
        user_click_map = false;
        if (inS1) {
            inputString_s1.push_back(c);
            std::string temp(inputString_s1.begin(), inputString_s1.end());
            outputString_s1 = temp;

        } else if (inS2) {
            inputString_s2.push_back(c);
            std::string temp(inputString_s2.begin(), inputString_s2.end());
            outputString_s2 = temp;

        }
    }
    drawscreen();
}

//highlight intersection of two intersected street and print all informations

void draw_highlight_intersections() {
    if (inter_id_twoStreet.size() == 0 && draw_enable == false) {
        std::cout << "Not Found" << std::endl;
    } else {
        std::cout << "Intersections Information:" << std::endl;
        for (unsigned i = 0; i < inter_id_twoStreet.size(); i++) {
            //get information and print them
            setcolor(BLACK);
            unsigned intersection_id = inter_id_twoStreet[i];
            /* std::string inter_name = (mymap->intersectionUOM[intersection_id]).intersectionName1;
             drawtext(length_of_bar * 0.53, bar_t_r_y * (1.054 + abs(i)*0.03), inter_name);
             std::string temp_int = std::to_string(intersection_id);
             drawtext(length_of_bar * 0.71, bar_t_r_y * (1.054 + abs(i)*0.03), temp_int);
             std::string temp_pos_1 = std::to_string((mymap->intersectionUOM[intersection_id]).intersectionPosition1.lon());
             std::string temp_pos_2 = std::to_string((mymap->intersectionUOM[intersection_id]).intersectionPosition1.lat());
             std::string result = "( " + temp_pos_1 + "," + temp_pos_2 + " )";
             drawtext(length_of_bar * 0.85, bar_t_r_y * (1.054 + abs(i)*0.03), result);*/

            // get position
            set_coordinate_system(GL_WORLD);
            inter_point_screen = coordinate_convert_inter(intersection_id);
            set_coordinate_system(GL_SCREEN);
            //highlight the point
            setcolor(t_color(243, 113, 34));
            fillarc(inter_point_screen.x, inter_point_screen.y, 10, 90, 360);
        }

    }


}

//This function is called when user press the "Find" button

void highlight_street_intersections() {

    if (inputString_s1.size() == 0 || inputString_s2.size() == 0) {
        //user provide too few arguments
        std::cout << "Invalid argument" << std::endl;
    } else {
        draw_inter_streets = true;
        std::string street1(inputString_s1.begin(), inputString_s1.end());
        std::string street2(inputString_s2.begin(), inputString_s2.end());
         // std::cout << "street1 = " << street1 <<std::endl;
         // std::cout << "street2 = " << street2 <<std::endl;
        inter_id_twoStreet = find_intersection_ids_from_street_names(street1, street2);
         // std::cout << "inter_id_twoStreet.size() =  " << inter_id_twoStreet.size() <<std::endl;
        if (inter_id_twoStreet.size() == 0) {
            std::cout << "Not Found" << std::endl;
        } else {
            if (foundInterID.twoInput == false) {
                if (foundInterID.interOne == 0) {
                foundInterID.interOne = inter_id_twoStreet[0];
                foundInterID.interOneW = get_world_point(inter_id_twoStreet[0]);             
                }
                
                else {
                  //  std::cout << "Here!!" << std::endl;
                    foundInterID.interTwo = inter_id_twoStreet[0];
                     foundInterID.interTwoW = get_world_point(inter_id_twoStreet[0]);
                    foundInterID.twoInput = true;
                }
            } else {
                std::cout << "Reset"<<std::endl;
                foundInterID.reset();
                inputIntersections.clear();
                foundInterID.interOne = inter_id_twoStreet[0];
                foundInterID.interOneW = get_world_point(inter_id_twoStreet[0]);        
            }
           // std::cout << "interONe ====== " << foundInterID.interOne << std::endl;
           // std::cout << "interTwo ===== " << foundInterID.interTwo << std::endl;
            //only have one intersection
            if (inter_id_twoStreet.size() != 0) {
               std::string inter_name = (mymap->intersectionUOM[inter_id_twoStreet[0]]).intersectionName1;
                if (inputIntersections.size() != 0) {
                    if (inputIntersections[inputIntersections.size() - 1] != inter_name)inputIntersections.push_back(inter_name);
                } else inputIntersections.push_back(inter_name);
            }

        }


    }

}

void checkBarOpen(){ 
           if(searIconClick == true || interIconClick == false) {
        //user enter intersections without close the pop-up window
        int line_height = 15;
        int line_width = 400;
       
        for (int i = 0; i <  inputIntersections.size() ; i++ ){
          //  std::cout << "66666666666666" <<std::endl;
            int left_buttom_y = listInter.bottom() + (1+ i)*line_height;
            setcolor(WHITE);
            fillrect(listInter.left(),left_buttom_y,listInter.left() +line_width,left_buttom_y -line_height );
            setcolor(BLACK);
            setfontsize(12);
            drawtext(listInter.left() + line_width/2,left_buttom_y - line_height/2,inputIntersections[i]);          
        }
    }
}
#endif /* INFORMATION_BAR_H */

